name: Project CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  setup:
    name: setup
    runs-on: ubuntu-latest
    outputs:
      sha_short: ${{ "{{" }} steps.sha.outputs.sha_short }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: generate short commit hash
      id: sha
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

  python:
    env:
      ORG: "{{cookiecutter.image_organization}}"
      IMAGE_NAME: "{{cookiecutter.image_name}}"
      TAG: "3.8"
      DOCKERFILE: "Dockerfile"
    name: "Python library"
    runs-on: ubuntu-latest
    needs: setup
    steps:
    # Checkout code
    - name: Checkout code
      uses: actions/checkout@v2
    # Setup docker
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub # FIXME: Optional
      continue-on-error: true
      uses: docker/login-action@v1
      with:
        username: ${{ "{{" }} secrets.DOCKERHUB_USERNAME }}
        password: ${{ "{{" }} secrets.DOCKERHUB_TOKEN }}
    # Library (docker)
    - name: "Build docker image ({{cookiecutter.image_name}})"
      #working-directory: ./
      run: |
        docker build -f ${DOCKERFILE} -t "${ORG}/${IMAGE_NAME}:latest" -t "${ORG}/${IMAGE_NAME}:${{ "{{" }} needs.setup.outputs.sha_short }}" .
    # Tests
    - name: "Tests and coverage ({{cookiecutter.package_name}})"
      run: |
        docker run -i "${ORG}/${IMAGE_NAME}:latest" green -vvv /app
    # Type checks
    - name: "Type checks ({{cookiecutter.repo_name}})"
      continue-on-error: true
      run : |
        docker run -i "${ORG}/${IMAGE_NAME}:latest" mypy --ignore-missing-imports --follow-imports=skip --strict-optional /app
    # publish
    - name: "Publish docker image ({{cookiecutter.image_name}} image)"
      continue-on-error: true
      env:
        ORG: "{{cookiecutter.image_organization}}"
        IMAGE_NAME: "{{cookiecutter.image_name}}"
      if: github.ref == 'refs/heads/main'
      run: docker push --all-tags "${ORG}/${IMAGE_NAME}"

    # code formatting and linting
    - name: "Code formatting & linting"
      continue-on-error: true
      run: docker run -i "${ORG}/${IMAGE_NAME}" black --check /app

    # docs
    - name: "Create documentation (API docs)"
      run: docker run -i -v "$GITHUB_WORKSPACE:/app" "${ORG}/${IMAGE_NAME}" pdoc --html -c latex_math=True --force --output-dir docs/api clu
    # docs
    - name: "Create documentation (other)"
      env:
        ORG: "parsertongue"
        IMAGE_NAME: "mkdocs"
      run: docker run -i -v "$GITHUB_WORKSPACE:/app" "${ORG}/${IMAGE_NAME}" mkdocs build -c
      #run: docker run -i -v "$GITHUB_WORKSPACE:/app" "${ORG}/${IMAGE_NAME}" portray as_html
    - name: Deploy docs
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        # see https://docs.github.com/en/free-pro-team@latest/actions/reference/authentication-in-a-workflow#about-the-github_token-secret
        github_token: ${{ "{{" }} secrets.GITHUB_TOKEN }}
        publish_dir: ./site
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: ${{ "{{" }} github.event.head_commit.message }}
